pipeline {
    agent any
    environment {
        SLACK = credentials('slack-notification')
    }
    parameters {
        choice(
            name: 'CLUSTER',
            choices: ['HX', 'HH'],
            description: 'Which cluster config to use?'
        )
        choice(
            name: 'WEB',
            choices: ['TEST', 'PROD'],
            description: 'Which website do you want to update?'
        )
        choice(
            name: 'EBI_SEARCH_ENDPOINT',
            choices: ['PRO', 'DEV'],
            description: 'Which ebi search index to use?'
        )
        choice(
            name: 'DATABASE',
            choices: ['PRO', 'DEV', 'TEST', 'FB', 'HH'],
            description: 'Which database instance to use?'
        )
        gitParameter(
            branchFilter: 'origin/(.*)',
            defaultValue: 'master',
            name: 'BRANCH',
            type: 'PT_BRANCH',
            description: 'Name of the branch to test and deploy'
        )
    }
    stages {
        stage("deploy") {
            steps {
                script {
                    // set DB with the corresponding Secret file
                    switch(params.DATABASE) {
                        case 'PRO':
                            env.DB = 'db-pro'
                            break
                        case 'DEV':
                            env.DB = 'db-dev'
                            break
                        case 'TEST':
                            env.DB = 'db-test'
                            break
                        case 'FB':
                            env.DB = 'db-fb'
                            break
                        case 'HH':
                            env.DB = 'db-hh'
                            break
                    }

                    // set RELEASE with the corresponding instance chart
                    switch(params.WEB) {
                        case 'TEST':
                            env.RELEASE = 'full-dev'
                            env.NAMESPACE = 'dev'
                            env.VALUES = '--values=values.dev.yaml'
                            break
                        case 'PROD':
                            env.RELEASE = 'full-prod'
                            env.NAMESPACE = 'prod'
                            env.VALUES = ''
                            break
                    }

                    // set SEARCH_INDEX
                    switch(params.EBI_SEARCH_ENDPOINT) {
                        case 'PRO':
                            env.SEARCH_INDEX = 'search-index-prod'
                            break
                        case 'DEV':
                            env.SEARCH_INDEX = 'search-index-dev'
                            break
                    }

                    if (params.CLUSTER == 'HX') {
                        withCredentials([file(credentialsId: 'HX-WP-Config', variable: 'config')]) {
                            sh """
                                curl -X POST -H 'Content-type: application/json' --data '{"text":"Starting deployment of ${params.BRANCH} in ${params.WEB} - ${params.CLUSTER} cluster"}' $SLACK
                                git checkout python3-version
                                echo 'Flush the cache'
                                POD=$(/net/isilonP/public/rw/homes/xfm_adm/.jenkins/kubectl --kubeconfig=${config} get pod -l app=memcached -o jsonpath="{.items[0].metadata.name}")
                                /net/isilonP/public/rw/homes/xfm_adm/.jenkins/kubectl --kubeconfig=${config} exec -it $POD -- sh -c "echo flush_all | nc localhost 11211"
                                cd kubernetes/helm
                                echo 'Deleting pods'
                                /net/isilonP/public/rw/homes/xfm_adm/.jenkins/helm uninstall ${RELEASE} --kubeconfig ${config} --namespace ${NAMESPACE}
                                sleep 10
                                echo 'Creating pods'
                                /net/isilonP/public/rw/homes/xfm_adm/.jenkins/helm upgrade --install ${RELEASE} --kubeconfig ${config} --namespace ${NAMESPACE} ${VALUES} --set proxy=proxy-hx,database=${DB},searchIndex=${SEARCH_INDEX},rnacentralBranch=${params.BRANCH} .
                                curl -X POST -H 'Content-type: application/json' --data '{"text":"Finishing the deployment of the ${params.BRANCH} image in ${params.WEB} of the ${params.CLUSTER} cluster. This may take a few more seconds. "}' $SLACK
                            """
                        }
                    } else if (params.CLUSTER == 'HH') {
                        withCredentials([file(credentialsId: 'HH-WP-Config', variable: 'config')]) {
                            sh """
                                curl -X POST -H 'Content-type: application/json' --data '{"text":"Starting deployment of ${params.BRANCH} in ${params.WEB} - ${params.CLUSTER} cluster"}' $SLACK
                                git checkout python3-version
                                echo 'Flush the cache'
                                POD=$(/net/isilonP/public/rw/homes/xfm_adm/.jenkins/kubectl --kubeconfig=${config} get pod -l app=memcached -o jsonpath="{.items[0].metadata.name}")
                                /net/isilonP/public/rw/homes/xfm_adm/.jenkins/kubectl --kubeconfig=${config} exec -it $POD -- sh -c "echo flush_all | nc localhost 11211"
                                cd kubernetes/helm
                                echo 'Deleting pods'
                                /net/isilonP/public/rw/homes/xfm_adm/.jenkins/helm uninstall ${RELEASE} --kubeconfig ${config} --namespace ${NAMESPACE}
                                sleep 10
                                echo 'Creating pods'
                                /net/isilonP/public/rw/homes/xfm_adm/.jenkins/helm upgrade --install ${RELEASE} --kubeconfig ${config} --namespace ${NAMESPACE} ${VALUES} --set proxy=proxy-hh,database=${DB},searchIndex=${SEARCH_INDEX},rnacentralBranch=${params.BRANCH} .
                                curl -X POST -H 'Content-type: application/json' --data '{"text":"Finishing the deployment of the ${params.BRANCH} image in ${params.WEB} of the ${params.CLUSTER} cluster. This may take a few more seconds. "}' $SLACK
                            """
                        }
                    }
                }
            }
        }
    }
}
