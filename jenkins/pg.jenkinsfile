pipeline {
    agent any
    parameters {
        choice(
            name: 'DATABASE',
            choices: ['HH', 'FB', 'PRO', 'DEV', 'TEST', 'HH-PG10', 'FB-PG10', 'PRO-PG10', 'DEV-PG10', 'TEST-PG10'],
            description: 'Which database instance to use?'
        )
        choice(
            name: 'EBI_SEARCH_ENDPOINT',
            choices: ['PRO', 'DEV'],
            description: 'Which ebi search index to use?'
        )
        choice(
            name: 'RQ_QUEUE',
            choices: ['PG', 'OY', 'LOCAL'],
            description: 'Which redis queues settings to use?'
        )
        choice(
            name: 'COMPRESSOR',
            choices: ['True', 'False'],
            description: 'Shall we use django-compressor?'
        )
        choice(
            name: 'QUICK',
            choices: ['True', 'False'],
            description: 'Fast rebuild: pull, collect (and compress) static, touch wsgi.py.'
        )
        gitParameter(
            branchFilter: 'origin/(.*)',
            defaultValue: 'master',
            name: 'BRANCH',
            type: 'PT_BRANCH',
            description: 'Name of the branch to test and deploy'
        )
    }
    stages {
        stage("deploy") {
            environment {
                DATABASE_PRO = credentials('database_pro.py')
                DATABASE_DEV = credentials('database_dev.py')
                DATABASE_TEST = credentials('database_test.py')
                DATABASE_FB = credentials('database_fb.py')
                DATABASE_HH = credentials('database_hh.py')
                DATABASE_PRO_PG10 = credentials('database_pro_pg10.py')
                DATABASE_DEV_PG10 = credentials('database_dev_pg10.py')
                DATABASE_TEST_PG10 = credentials('database_test_pg10.py')
                DATABASE_FB_PG10 = credentials('database_fb_pg10.py')
                DATABASE_HH_PG10 = credentials('database_hh_pg10.py')

                EBI_SEARCH_ENDPOINT_PRO = credentials('ebi_search_endpoint_pro.py')
                EBI_SEARCH_ENDPOINT_DEV = credentials('ebi_search_endpoint_dev.py')

                RQ_QUEUE_LOCAL = credentials('rq_queue_local.py')
                RQ_QUEUE_OY = credentials('rq_queue_oy.py')
                RQ_QUEUE_PG = credentials('rq_queue_pg.py')

                LOCAL_SETTINGS = credentials('local_settings.py')
                ENV_SH = credentials('env_sh')
            }
            steps {
                script {
                    if (params.DATABASE == 'PRO') {
                        sh 'cat ${DATABASE_PRO} > tmp'
                    } else if (params.DATABASE == 'DEV') {
                        sh 'cat ${DATABASE_DEV} > tmp'
                    } else if (params.DATABASE == 'TEST') {
                        sh 'cat ${DATABASE_TEST} > tmp'
                    } else if (params.DATABASE == 'FB') {
                        sh 'cat ${DATABASE_FB} > tmp'
                    } else if (params.DATABASE == 'HH') {
                        sh 'cat ${DATABASE_HH} > tmp'
                    } else if (params.DATABASE == 'PRO-PG10') {
                        sh 'cat ${DATABASE_PRO_PG10} > tmp'
                    } else if (params.DATABASE == 'DEV-PG10') {
                        sh 'cat ${DATABASE_DEV_PG10} > tmp'
                    } else if (params.DATABASE == 'TEST-PG10') {
                        sh 'cat ${DATABASE_TEST_PG10} > tmp'
                    } else if (params.DATABASE == 'FB-PG10') {
                        sh 'cat ${DATABASE_FB_PG10} > tmp'
                    } else if (params.DATABASE == 'HH-PG10') {
                        sh 'cat ${DATABASE_HH_PG10} > tmp'
                    }

                    sh 'rsync -av tmp ves-pg-a4:/nfs/public/rw/xfam/rnacentral/live/rnacentral-webcode/rnacentral/rnacentral/databases.py'
                }

                script {
                    if (params.EBI_SEARCH_ENDPOINT == 'PRO') {
                        sh 'cat ${EBI_SEARCH_ENDPOINT_PRO} > tmp'
                    } else if (params.EBI_SEARCH_ENDPOINT == 'DEV') {
                        sh 'cat ${EBI_SEARCH_ENDPOINT_DEV} > tmp'
                    }

                    sh 'rsync -av tmp ves-pg-a4:/nfs/public/rw/xfam/rnacentral/live/rnacentral-webcode/rnacentral/rnacentral/ebi_search_endpoints.py'
                }

                script {
                    if (params.RQ_QUEUE == 'LOCAL') {
                        sh 'cat ${RQ_QUEUE_LOCAL} > tmp'
                    } else if (params.RQ_QUEUE == 'OY') {
                        sh 'cat ${RQ_QUEUE_OY} > tmp'
                    } else if (params.RQ_QUEUE == 'PG') {
                        sh 'cat ${RQ_QUEUE_PG} > tmp'
                    }

                    sh 'rsync -av tmp ves-pg-a4:/nfs/public/rw/xfam/rnacentral/live/rnacentral-webcode/rnacentral/rnacentral/rq_queues.py'
                }

                script {
                    if (params.COMPRESSOR == 'True') {
                        sh 'echo "COMPRESS_ENABLED = True" > tmp'
                    } else if (params.COMPRESSOR == 'False') {
                        sh 'echo "COMPRESS_ENABLED = False" > tmp'
                    }

                    sh 'rsync -av tmp ves-pg-a4:/nfs/public/rw/xfam/rnacentral/live/rnacentral-webcode/rnacentral/rnacentral/compressor.py'
                }

                sh 'cat $LOCAL_SETTINGS > tmp'
                sh 'rsync -av tmp ves-pg-a4:/nfs/public/rw/xfam/rnacentral/live/rnacentral-webcode/rnacentral/rnacentral/local_settings.py'

                sh 'cat $ENV_SH > tmp'
                sh 'rsync -av tmp ves-pg-a4:/nfs/public/rw/xfam/rnacentral/live/rnacentral-webcode/rnacentral/rnacentral/env.sh'

                sh """
                    cd /nfs/public/rw/xfam/rnacentral/live
                    source local/virtualenvs/RNAcentral/bin/activate
                    cd rnacentral-webcode/rnacentral
                    source scripts/env.sh

                    # update repository to fetch the latest fabfile
                    git reset --hard
                    git fetch --all
                    git checkout ${params.BRANCH}
                    git pull

                    fab -H ves-pg-a4 production deploy:git_branch=${params.BRANCH},quick=${params.QUICK},compress=${params.COMPRESSOR}
                """
            }
        }
    }
}
